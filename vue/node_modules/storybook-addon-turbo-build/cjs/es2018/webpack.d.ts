/**
 * @module
 * Helper functions for modifying webpack config.
 */
import { Configuration, Plugin, RuleSetRule, RuleSetUseItem } from "webpack";
/**
 * Returns whether the rule will be applied to a file with given filename.
 * @param rule rule to test
 * @param filename filename or filepath to test with
 * @returns whether the rule is active for the file
 */
export declare function isRuleAppliedTo(rule: RuleSetRule, filename: string): boolean;
/**
 * Replace minimizer library.
 * @param config webpack config
 * @param minimizer new minimizer
 * @returns modified webpack config
 */
export declare function replaceMinimizer(config: Configuration, minimizer: Plugin): Configuration;
declare type AnyConstructor = new (...args: any) => any;
/**
 * Remove a plugin from a plugin list in a given webpack config.
 * @param config webpack config
 * @param ctor constructor of the plugin to remove
 * @returns modified webpack config
 */
export declare function removePlugin(config: Configuration, ctor: AnyConstructor): Configuration;
declare type LoaderTester = (loader: RuleSetUseItem, rule: RuleSetRule) => boolean;
export declare type LoaderReplacer = (loader: RuleSetUseItem, rule: RuleSetRule) => RuleSetUseItem | null;
/**
 * Replace or Remove loader matching to `test` with a value returned from `replaceWith`.
 * @param config webpack config
 * @param test decides whether the loader is replaced (removed). think as 1st parameter of Array.prototype.filter
 * @param replaceWith a factory function returns a rule which takes place in. return null to remove the loader
 * @returns modified webpack config
 */
export declare function replaceLoader(config: Configuration, test: LoaderTester, replaceWith: LoaderReplacer): Configuration;
export {};
