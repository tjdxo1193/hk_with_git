"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const transformers_1 = require("./transformers");
function compose(...fns) {
    return function (config, options) {
        return fns.reduce((c, transformer) => transformer(c, options), config);
    };
}
function id(t) {
    return t;
}
function normalizeOptions(options = {}) {
    var _a, _b, _c, _d;
    const isProd = process.env.NODE_ENV === "production";
    return {
        optimizationLevel: Math.max(Math.min(Math.round((_a = options.optimizationLevel) !== null && _a !== void 0 ? _a : 1), 3), 0),
        removeProgressPlugin: (_b = options.removeProgressPlugin) !== null && _b !== void 0 ? _b : isProd,
        disableSourceMap: (_c = options.disableSourceMap) !== null && _c !== void 0 ? _c : isProd,
        esbuildMinifyOptions: (_d = options.esbuildMinifyOptions) !== null && _d !== void 0 ? _d : {},
        managerTranspiler: options.managerTranspiler,
        previewTranspiler: options.previewTranspiler,
    };
}
function normalizeReplacer(replacer) {
    if (typeof replacer === "function") {
        return replacer;
    }
    return () => replacer;
}
exports.default = {
    // Extends Storybook manager webpack (manager is the non-preview UIs, written in React)
    async managerWebpack(config, options) {
        const finalOptions = normalizeOptions(options);
        if (finalOptions.optimizationLevel === 0) {
            return config;
        }
        const transpiler = typeof finalOptions.managerTranspiler !== "undefined"
            ? (0, transformers_1.replaceBabelLoader)(normalizeReplacer(finalOptions.managerTranspiler))
            : finalOptions.optimizationLevel >= 2
                ? (0, transformers_1.replaceBabelLoader)(transformers_1.esbuildLoaderReplacer)
                : id;
        const transformers = compose(transformers_1.useESBuildAsMinifier, transformers_1.removeProgressPlugin, transformers_1.disableSourceMap, transpiler);
        return transformers(config, finalOptions);
    },
    async webpack(config, options) {
        const finalOptions = normalizeOptions(options);
        if (finalOptions.optimizationLevel === 0) {
            return config;
        }
        const transpiler = typeof finalOptions.previewTranspiler !== "undefined"
            ? (0, transformers_1.replaceBabelLoader)(normalizeReplacer(finalOptions.previewTranspiler))
            : finalOptions.optimizationLevel >= 3
                ? (0, transformers_1.replaceBabelLoader)(transformers_1.esbuildLoaderReplacer)
                : id;
        const transformers = compose(transformers_1.useESBuildAsMinifier, transformers_1.removeProgressPlugin, transformers_1.disableSourceMap, transpiler);
        return transformers(config, finalOptions);
    },
};
