import type * as webpack from "webpack";
import type { PresetOptions } from "./types";
import { LoaderReplacer } from "./webpack";
/**
 * We can't just remove babel-laoder: since Storybook ships codes with JSX,
 * we need to transpile it in *loader phase* so webpack can handle files correctly.
 */
export declare const esbuildLoaderReplacer: LoaderReplacer;
/**
 * Replace babel-loader with specified loader.
 * @param replacer Function that takes loader object (`RuleSetUseItem`) and rule (`RuleSetRule`) then returns a new loader object.
 */
export declare const replaceBabelLoader: (replacer: LoaderReplacer) => (config: webpack.Configuration) => webpack.Configuration;
export declare function removeProgressPlugin(config: webpack.Configuration, options: PresetOptions): webpack.Configuration;
/**
 * Replace webpack's default minimizer with ESBuild.
 * @param config webpack config
 * @param options preset options
 * @returns modified webpack config
 */
export declare function useESBuildAsMinifier(config: webpack.Configuration, options: PresetOptions): webpack.Configuration;
/**
 * Disables source map generation.
 * Source map generation in production is expensive operation and does not carry much benefit to users.
 * Especially in Storybook:
 * - There are Docs Addon and Storysource Addon
 * - The number of files to build tends to be quitely large
 * @param config webpack config
 * @param options preset options
 * @returns modified webpack config
 */
export declare function disableSourceMap(config: webpack.Configuration, options: PresetOptions): webpack.Configuration;
