"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.disableSourceMap = exports.useESBuildAsMinifier = exports.removeProgressPlugin = exports.replaceBabelLoader = exports.esbuildLoaderReplacer = void 0;
const esbuild_loader_1 = require("esbuild-loader");
const webpack_1 = require("webpack");
const webpack_2 = require("./webpack");
const babelLoaderPattern = /babel-loader/;
/**
 * We can't just remove babel-laoder: since Storybook ships codes with JSX,
 * we need to transpile it in *loader phase* so webpack can handle files correctly.
 */
const esbuildLoaderReplacer = (loader, rule) => ({
    loader: require.resolve("esbuild-loader"),
    options: {
        target: "es2015",
        loader: (0, webpack_2.isRuleAppliedTo)(rule, "foo.ts") ? "tsx" : "jsx",
    },
});
exports.esbuildLoaderReplacer = esbuildLoaderReplacer;
/**
 * Replace babel-loader with specified loader.
 * @param replacer Function that takes loader object (`RuleSetUseItem`) and rule (`RuleSetRule`) then returns a new loader object.
 */
const replaceBabelLoader = (replacer) => (config) => {
    return (0, webpack_2.replaceLoader)(config, (loader, rule) => {
        switch (typeof loader) {
            case "string":
                return babelLoaderPattern.test(loader);
            case "object":
                return !!(((0, webpack_2.isRuleAppliedTo)(rule, "foo.js") ||
                    (0, webpack_2.isRuleAppliedTo)(rule, "foo.ts")) &&
                    loader.loader &&
                    babelLoaderPattern.test(loader.loader));
            default:
                return false;
        }
    }, replacer);
};
exports.replaceBabelLoader = replaceBabelLoader;
function removeProgressPlugin(config, options) {
    return options.removeProgressPlugin
        ? (0, webpack_2.removePlugin)(config, webpack_1.ProgressPlugin)
        : config;
}
exports.removeProgressPlugin = removeProgressPlugin;
/**
 * Replace webpack's default minimizer with ESBuild.
 * @param config webpack config
 * @param options preset options
 * @returns modified webpack config
 */
function useESBuildAsMinifier(config, options) {
    var _a;
    return (0, webpack_2.replaceMinimizer)(config, new esbuild_loader_1.ESBuildMinifyPlugin({
        target: "es2015",
        ...((_a = options.esbuildMinifyOptions) !== null && _a !== void 0 ? _a : {}),
    }));
}
exports.useESBuildAsMinifier = useESBuildAsMinifier;
/**
 * Disables source map generation.
 * Source map generation in production is expensive operation and does not carry much benefit to users.
 * Especially in Storybook:
 * - There are Docs Addon and Storysource Addon
 * - The number of files to build tends to be quitely large
 * @param config webpack config
 * @param options preset options
 * @returns modified webpack config
 */
function disableSourceMap(config, options) {
    if (!options.disableSourceMap) {
        return config;
    }
    return {
        ...config,
        devtool: false,
    };
}
exports.disableSourceMap = disableSourceMap;
